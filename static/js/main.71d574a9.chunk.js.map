{"version":3,"sources":["asset/image/logo.png","logo.svg","navigation/navigation.js","constant.js","pages/main.js","pages/second.js","appRouter/appRouter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","navbar","backgroundColor","console","log","Navbar","className","expand","Brand","href","process","src","logo","width","height","alt","Toggle","Collapse","id","Nav","style","Col","md","Row","offset","span","to","Link","React","Component","instagramTitleRegExp","RegExp","instagramRegExp","Main","state","photos","title","this","fetchInstagramPhotos","result","setState","error","accountUrl","axios","get","response","data","match","substring","length","json","JSON","parse","edges","entry_data","ProfilePage","graphql","user","edge_owner_to_timeline_media","splice","map","node","url","shortcode","thumbnailUrl","thumbnail_src","displayUrl","display_url","caption","edge_media_to_caption","text","align","color","photo","Card","Img","variant","split","i","key","Second","AppRouter","basename","exact","path","component","App","Container","pageId","appId","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.71d574a9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d6394da0.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, NavItem, Button, Col, Row } from 'react-bootstrap';\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { SHOP_NAME } from '../constant';\nimport logo from '../asset/image/logo.png';\nimport './navigation.css';\n\nexport default class Navigation extends React.Component {\n    navbar = { backgroundColor: '#F16E10 !important' };\n    render() {\n        console.log(\"asdacd\")\n        return <Navbar className=\"color-nav\" expand=\"lg\">\n            <Navbar.Brand href={process.env.PUBLIC_URL}>\n                <img\n                    src={logo}\n                    width=\"270\"\n                    height=\"45\"\n                    className=\"d-inline-block align-top\"\n                    alt={SHOP_NAME}\n                />\n            </Navbar.Brand>\n            <Navbar.Toggle />\n            <Navbar.Collapse id=\"basic-navbar-nav\" >\n                <Nav style={{width:\"100%\"}}>\n                    <Col md=\"12\">\n                    <Row>\n                        <Col md={{offset:1, span:3}}>\n                            <LinkContainer to=\"/\">\n                                <Nav.Link>Main</Nav.Link>\n                            </LinkContainer>\n                        </Col>\n                        <Col md={{span:3}}>\n                            <LinkContainer to=\"/second\">\n                                <Nav.Link>SECOND</Nav.Link>\n                            </LinkContainer></Col>\n\n                    </Row>\n                    </Col>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    }\n\n}","export const SHOP_NAME = 'GIN FACE ID';","import React from 'react';\nimport axios from 'axios';\nimport { Card } from 'react-bootstrap';\nimport './main.css';\n\nconst instagramTitleRegExp = new RegExp(/<title>\\n*(.*)\\(@gin_faceid.hk\\) â€¢ Instagram photos and videos\\n*<\\/title>/)\nconst instagramRegExp = new RegExp(/<script type=\"text\\/javascript\">window\\._sharedData = (.*)<\\/script>/);\nexport default class Main extends React.Component {\n\n    state = {\n        photos: [],\n        title: \"\"\n    }\n\n    async componentDidMount() {\n        try {\n            const result = await this.fetchInstagramPhotos('https://www.instagram.com/gin_faceid.hk/')\n            console.log(result.title)\n            this.setState({\n                photos: result.photos,\n                title: result.title\n            })\n            // Do something with the photos\n        } catch (e) {\n            console.error('Fetching Instagram photos failed', e)\n        }\n    }\n\n    async fetchInstagramPhotos(accountUrl) {\n        const response = await axios.get(accountUrl)\n        var title = response.data.match(instagramTitleRegExp)[1]\n        console.log(title)\n        var data = response.data.match(instagramRegExp)[1];\n        data = data.substring(0, data.length - 1);\n        const json = JSON.parse(data)\n        const edges = json.entry_data.ProfilePage[0].graphql.user.edge_owner_to_timeline_media.edges.splice(0, 8)\n        const photos = edges.map(({ node }) => {\n            return {\n                url: `https://www.instagram.com/p/${node.shortcode}/`,\n                thumbnailUrl: node.thumbnail_src,\n                displayUrl: node.display_url,\n                caption: node.edge_media_to_caption.edges[0].node.text\n            }\n        })\n        // photos.forEach(x=>console.log(x.caption.replace(/(\\r\\n|\\n|\\r)/gm, '\\n')))\n        // console.log(photos);\n        return { title, photos }\n    }\n\n    render() {\n        return <div>\n            <br />\n            <br />\n            <legend align=\"center\" style={{color: \"#9A8873\"}}>{this.state.title}</legend>\n            <br />\n            {this.state.photos.map(photo => {\n                return <div><Card >\n                    <Card.Img variant=\"top\" src={photo.displayUrl} />\n\n                </Card>\n                    {photo.caption.split(/(\\r\\n|\\n|\\r)/gm).map((i, key) => {\n                        return <div key={key}>{i}</div>\n                    })}</div>\n\n            })}\n        </div>\n    }\n}","import React from 'react';\n\nexport default class Second extends React.Component {\n\n    render() {\n        return <div>\n            cde\n            </div>\n    }\n}","import React from \"react\";\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport Navigation from '../navigation/navigation';\nimport Main from '../pages/main';\nimport Second from '../pages/second';\nexport default class AppRouter extends React.Component {\n  \n\n  render() {\n    return <HashRouter basename={process.env.PUBLIC_URL}>\n    \n      <div>\n      <Navigation />\n        <Switch>\n          <Route exact path=\"/\" component={Main} />\n          <Route path=\"/second\" component={Second} />\n        </Switch>\n      </div>\n\n    </HashRouter>\n  }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport AppRouter from './appRouter/appRouter';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport MessengerCustomerChat from 'react-messenger-customer-chat';\n\nfunction App() {\n  return <Container>\n    <Row>\n      <Col >\n        <AppRouter className=\"offset-md-2 col-md-8\" />\n      </Col>\n    </Row>\n    <MessengerCustomerChat\n      pageId=\"2025900314121570\"\n      appId=\"638776666894882\"\n    />\n  </Container>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}